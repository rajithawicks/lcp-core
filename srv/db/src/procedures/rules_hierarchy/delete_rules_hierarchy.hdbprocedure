PROCEDURE "DELETE_RULES_HIERARCHY"( 
	IN	IV_RULEID nvarchar(32),
	OUT ET_RETURN "TT_RETURN_MESSAGE"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   USING "UTILITY" AS util;
   USING "MESSAGEUTILITY" AS message; 
   USING "C_MESSAGE_TYPE" AS messageType;
   
   DECLARE doExist boolean = true;
   DECLARE sMessage string;
   DECLARE tCheckCriteria TABLE (
   					COLUMN_VALUE nvarchar(50),
   					COLUMN_NAME nvarchar(50)
   				);
   DECLARE ls_rules_hierarchy ROW LIKE "PR_PRICINGRULE";
   
    SELECT * INTO ls_rules_hierarchy
    FROM "PR_PRICINGRULE"
    WHERE RULEID = :IV_RULEID;
   
   -- Existence check - Rule Hierarchy
   :tCheckCriteria.INSERT((:IV_RULEID,'RULEID'), 1);
   CALL util:"check_data_exists"('PR_PRICINGRULE',:tCheckCriteria,:doExist);
   IF (:doExist = false) THEN
      CALL message:"get_message"('', '', '007', :IV_RULEID, '', '', '', :sMessage);
		:ET_RETURN.INSERT((messageType:error, :sMessage));
   ELSE
	    IF (:ls_rules_hierarchy.PRIORITY = -1) THEN
		   CALL message:"get_message"('', '', '002', :IV_RULEID, '', '', '', :sMessage);
			:ET_RETURN.insert((messageType:error, sMessage ));
		ELSE
		-- Toggle Rule Hierarchy's Priority field to -1
			UPDATE "PR_PRICINGRULE" SET PRIORITY = -1 WHERE RULEID = :IV_RULEID;
			COMMIT;
		END IF;
   END IF;
END