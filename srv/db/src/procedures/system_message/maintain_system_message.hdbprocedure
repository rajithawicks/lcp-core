PROCEDURE "MAINTAIN_SYSTEM_MESSAGE"( 
	IN  IV_RULEID nvarchar(4),
	IN  IV_CLASSID nvarchar(3),
	IN  IV_LANGUAGEKEY nvarchar(2),
	IN  IV_SYSTEMMESSAGE nvarchar(40),
	OUT ET_RETURN "TT_RETURN_MESSAGE",
	OUT	EV_MESSAGENUMBER nvarchar(10)		
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
   /*************************************
       This procedure validate and create 
       or update data of system message
   *************************************/
	using "MESSAGEUTILITY" as message;
    using "C_MESSAGE_TYPE" as messageType;
    
    declare sMessage string;
	declare lv_count integer;
	declare lv_messagenumber nvarchar(10);
	declare lv_sql_query string;
	declare lv_updatePricingRuleMessageFlag boolean = false;
	declare lv_insertSystemMessageFlag boolean = false;
	declare lv_updateSystemMessageFlag boolean = false;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		call message:"get_message"('','','014','MAINTAIN_SYSTEM_MESSAGE_TYPE','','','',:sMessage);
		:ET_RETURN.insert((messageType:error, :sMessage));
	END;
	
	-- RuleID, ClassID, LangugeKey & SystemMessage are mandatory to check existence of of the System Message. 
	if (:IV_RULEID = '' OR :IV_RULEID = null OR :IV_CLASSID = '' OR :IV_CLASSID = null OR 
		:IV_LANGUAGEKEY = '' OR :IV_LANGUAGEKEY = null OR :IV_SYSTEMMESSAGE = '' OR :IV_SYSTEMMESSAGE = null) then
		CALL message:"get_message"('','','018','','','','',:sMessage);
		:ET_RETURN.insert((messageType:error, :sMessage));		
	else
		-- Get MessageNumber for the RuleID. Each RuleID will only have one MessageNumber (Multiple language) 
		IT_PRICINGRULE = 
			SELECT "RULEID", "MESSAGENUMBER"
			FROM "PR_PRICINGRULE"
			WHERE "RULEID" = :IV_RULEID;
			
		-- Exist RuleID in PricingRule	
		if RECORD_COUNT(:IT_PRICINGRULE) > 0 then
		
			-- New message - create new message sequence ID	
			if (:IT_PRICINGRULE.MESSAGENUMBER[1] is null OR :IT_PRICINGRULE.MESSAGENUMBER[1] = '') then
				EXEC 'SELECT "SYSTEMMESSAGESEQID".NEXTVAL FROM DUMMY' INTO lv_messagenumber;
				-- Fill leading zero using function prepare_leading_zero. MessageNumber is bound to 3 digits
				lv_sql_query = 'SELECT "PREPARE_LEADING_ZERO"('||lv_messagenumber||',3) FROM DUMMY';
				EXEC lv_sql_query INTO lv_messagenumber;
				EV_MESSAGENUMBER = :lv_messagenumber;
				
				-- Update Pricing Rule MessageNumber & add new System Message text
				lv_updatePricingRuleMessageFlag = true;
				lv_insertSystemMessageFlag = true;
				
			-- Exist MessageNumber in PricingRule	
			else
				EV_MESSAGENUMBER = :IT_PRICINGRULE.MESSAGENUMBER[1];
				IT_SYSTEMMESSAGE =
					SELECT "LANGUAGEKEY", "TEXT" 
					FROM "CA_MESSAGECLASSTEXT"
					WHERE "CLASSID" = :IV_CLASSID AND "MESSAGENUMBER" = :EV_MESSAGENUMBER AND "LANGUAGEKEY" = :IV_LANGUAGEKEY;
					
				-- Exist RuleID & MessageNumber combination in PricingRule
				if RECORD_COUNT(:IT_SYSTEMMESSAGE) > 0 then
					-- Update System Message text
					lv_updateSystemMessageFlag = true;
				else
					-- Insert new System Message text
					lv_insertSystemMessageFlag = true;
				end if;
			end if;
		else
			-- Rule ID missing from Pricing Rule
			CALL message:"get_message"('','','019','','','','',:sMessage);
			:ET_RETURN.insert((messageType:error, :sMessage));
		end if;
	end if;	

   	SELECT count(*) INTO lv_count FROM :ET_RETURN;
   	
   	if(:lv_count = 0) then
		-- Update System Message text
		if (:lv_updateSystemMessageFlag = true) then
			UPDATE "CA_MESSAGECLASSTEXT" 
			SET "TEXT" = :IV_SYSTEMMESSAGE
			WHERE "CLASSID" = :IV_CLASSID AND "MESSAGENUMBER" = :EV_MESSAGENUMBER AND "LANGUAGEKEY" = :IV_LANGUAGEKEY;
		end if;
		
		-- Insert new System Message text
		if (:lv_insertSystemMessageFlag = true) then
			INSERT INTO "CA_MESSAGECLASSTEXT" 
			("CLASSID", "MESSAGENUMBER", "LANGUAGEKEY", "TEXT")
			VALUES 
			(:IV_CLASSID, :EV_MESSAGENUMBER, :IV_LANGUAGEKEY, :IV_SYSTEMMESSAGE);	
		end if;
		
		-- Update Pricing Rule MessageNumber
		if (:lv_updatePricingRuleMessageFlag = true) then
			UPDATE "PR_PRICINGRULE" 
			SET "MESSAGENUMBER" = :EV_MESSAGENUMBER
			WHERE "RULEID" = :IV_RULEID;
		end if;
				
		commit;
	end if;   	
END