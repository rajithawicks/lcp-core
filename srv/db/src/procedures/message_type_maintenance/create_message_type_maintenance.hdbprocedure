PROCEDURE "CREATE_MESSAGE_TYPE_MAINTENANCE"( 
	IN  IV_RULEID nvarchar(4),
	IN  IV_EVENTTYPEID nvarchar(3),
	IN	IV_VALIDFROM date,
	IN	IV_VALIDTO date,
	IN	IV_MESSAGETYPEID nvarchar(10),
	OUT ET_RETURN "TT_RETURN_MESSAGE",
	OUT	EV_NEW_MESSAGETYPEUUID nvarchar(32)		
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
   /*************************************
       This procedure validate and create 
       data of message type maintenance 
   *************************************/
	using "MESSAGEUTILITY" as message;
    using "C_MESSAGE_TYPE" as messageType;
    
    declare sMessage string;
	declare lv_count integer;
	declare lv_validfrom string;
	declare lv_validto string;
	declare i integer;
	declare checkFlag boolean = true;
	declare vCurrentDate date = null;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		call message:"get_message"('','','014','CREATE_MESSAGE_TYPE_MAINTENANCE','','','',:sMessage);
		:ET_RETURN.insert((messageType:error, :sMessage));
	END;
	
	-- RuleID, EventTypeID & MessageTypeIDs are mandatory to check existence of overlapping validity based on the combination 
	if (:IV_RULEID = '' OR :IV_RULEID = null OR :IV_EVENTTYPEID = '' OR :IV_EVENTTYPEID = null 
		OR :IV_VALIDFROM = null OR :IV_VALIDTO = null OR :IV_MESSAGETYPEID = '' OR :IV_MESSAGETYPEID = null) then
		CALL message:"get_message"('','','016','','','','',:sMessage);
		:ET_RETURN.insert((messageType:error, :sMessage));
		checkFlag = false;
	else
		-- Validity period cannot be past dates
		EXEC 'SELECT CURRENT_DATE FROM DUMMY' INTO vCurrentDate;
		if vCurrentDate is not null then
			if ( :IV_VALIDFROM < :vCurrentDate ) then
				CALL message:"get_message"('','','044','','','','',:sMessage);
				:ET_RETURN.insert((messageType:error, :sMessage));			
				checkFlag = false;
			end if;
			if ( :IV_VALIDTO < :vCurrentDate ) then
				CALL message:"get_message"('','','045','','','','',:sMessage);
				:ET_RETURN.insert((messageType:error, :sMessage));			
				checkFlag = false;
			end if;
		end if;
		
		-- Get all combination of message type maintenance based on input for complete ranges of validity	
		if (:checkFlag = true) then
			IT_MESSAGETYPEMAINTENANCE = 
				SELECT "MESSAGETYPEUUID", "VALIDFROM", "VALIDTO"
				FROM "PR_MESSAGETYPEMAINTENANCE"
				WHERE "RULEID" = :IV_RULEID AND "EVENTTYPEID" = :IV_EVENTTYPEID AND "MESSAGETYPEID" = :IV_MESSAGETYPEID;
			for i in 1..RECORD_COUNT(:IT_MESSAGETYPEMAINTENANCE) do
				if (:checkFlag = true) then
					if (:IT_MESSAGETYPEMAINTENANCE.VALIDFROM[i] < :IV_VALIDFROM AND :IT_MESSAGETYPEMAINTENANCE.VALIDTO[i] > :IV_VALIDTO) OR 
					   (:IT_MESSAGETYPEMAINTENANCE.VALIDFROM[i] > :IV_VALIDFROM AND :IT_MESSAGETYPEMAINTENANCE.VALIDTO[i] < :IV_VALIDTO) OR 
					   (:IT_MESSAGETYPEMAINTENANCE.VALIDFROM[i] <= :IV_VALIDFROM AND :IT_MESSAGETYPEMAINTENANCE.VALIDTO[i] >= :IV_VALIDFROM) OR 
					   (:IT_MESSAGETYPEMAINTENANCE.VALIDFROM[i] <= :IV_VALIDTO AND :IT_MESSAGETYPEMAINTENANCE.VALIDTO[i] >= :IV_VALIDTO) then
						
						-- if overlapping entry exist, raise error
						lv_validfrom = :IT_MESSAGETYPEMAINTENANCE.VALIDFROM[i];
						lv_validto = :IT_MESSAGETYPEMAINTENANCE.VALIDTO[i];
						
				    	CALL message:"get_message"('','','015',:IV_RULEID,:IV_EVENTTYPEID,:lv_validfrom,:lv_validto,:sMessage);
				    	:ET_RETURN.insert((messageType:error, :sMessage));
				    	checkFlag = false;
					end if;
				end if;
			end for;
		end if;
	end if;
	
   	SELECT count(*) INTO lv_count FROM :ET_RETURN;
   	
   	if(:lv_count = 0) then
		-- Generate new Message Type Maintenance UUID
		EXEC 'SELECT sysuuid FROM DUMMY' INTO EV_NEW_MESSAGETYPEUUID;

		-- Insert new Message Type Maintenance
		INSERT INTO "PR_MESSAGETYPEMAINTENANCE" 
		(
			"MESSAGETYPEUUID", "RULEID", "EVENTTYPEID", "VALIDFROM", "VALIDTO", "MESSAGETYPEID"
		)
		VALUES 
		(
			:EV_NEW_MESSAGETYPEUUID, :IV_RULEID, :IV_EVENTTYPEID, :IV_VALIDFROM, :IV_VALIDTO, :IV_MESSAGETYPEID
		);
		
		commit;
	end if;   
END