PROCEDURE "VALIDATE_EVENT_RULE_CONDITION"( 
	IN	IV_ACTIVITYTYPE nvarchar(6),
	IN	IV_EVENTRULECONDITIONUUID nvarchar(32),
	IN	IV_RULECONDITIONUUID nvarchar(32) default null,
	IN  IV_CONDITIONFROM decimal(15,2) default null,
	IN  IV_CONDITIONTO decimal(15,2) default null,
	OUT ET_RETURN "TT_RETURN_MESSAGE"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA AS
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
	USING "UTILITY" AS util;
	USING "MESSAGEUTILITY" AS message; 
	USING "C_MESSAGE_TYPE" AS messageType;
	USING "C_ACTIVITY_TYPE" AS activityType;
	
	declare sMessage string;
	declare checkFlag boolean = true;
	declare doExist boolean = true;
	declare IT_CHECK_CRITERIA table (
   					COLUMN_VALUE nvarchar(50),
   					COLUMN_NAME nvarchar(50)
   				);
    declare i integer;
	declare vValidFrom string;
	declare vValidTo string;
	declare vEventRuleConditionUuid string;
	
    -- For update & delete, check for mandatory fields : EVENTRULECONDITIONUUID			
   	if ( :IV_ACTIVITYTYPE = activityType:update OR :IV_ACTIVITYTYPE = activityType:delete ) then
	    if( :IV_EVENTRULECONDITIONUUID is null OR :IV_EVENTRULECONDITIONUUID = '') then
			call message:"get_message"('','','037', '', '', '', '', :sMessage);
			:ET_RETURN.insert((messageType:error, :sMessage));
			checkFlag = false;
		else
			-- For update & delete, EVENTRULECONDITIONUUID & RULECONDITIONUUID combination shall exist in table
		    -- check existence of EVENTRULECONDITIONUUID & RULECONDITIONUUID if not empty
			:IT_CHECK_CRITERIA.delete();
			:IT_CHECK_CRITERIA.insert((:IV_EVENTRULECONDITIONUUID,'EVENTRULECONDITIONUUID'), 1);
		    CALL util:"check_data_exists"('PR_EVENTRULECONDITION',:IT_CHECK_CRITERIA,:doExist); 
		    if ( :doExist = false ) then
		    	-- Event Rule Condition record does not exist message
		    	call message:"get_message"('', '', '038', :IV_EVENTRULECONDITIONUUID, '', '', '', :sMessage);
		    	:ET_RETURN.insert((messageType:error, :sMessage));
		    	checkFlag = false;
		    end if;			
		end if;
		-- Validation completed for delete
		if ( :IV_ACTIVITYTYPE = activityType:delete ) then
			return;
		end if;		
   	end if;
   	
	-- check for mandatory fields : RULECONDITIONUUID (UUID generated from frontend call to function import)
    if( :IV_RULECONDITIONUUID is null OR :IV_RULECONDITIONUUID = '') then
		call message:"get_message"('','','029', '', '', '', '', :sMessage);
		:ET_RETURN.insert((messageType:error, :sMessage));
		checkFlag = false;
	else
	    -- check existence of RULECONDITIONUUID if not empty
		:IT_CHECK_CRITERIA.delete();
		:IT_CHECK_CRITERIA.insert((:IV_RULECONDITIONUUID,'RULECONDITIONUUID'), 1);
	    CALL util:"check_data_exists"('PR_RULECONDITION',:IT_CHECK_CRITERIA,:doExist); 
	    if ( :doExist = false ) then
	    	-- Rule Condition record does not exist message
	    	call message:"get_message"('', '', '030', :IV_RULECONDITIONUUID, '', '', '', :sMessage);
	    	:ET_RETURN.insert((messageType:error, :sMessage));
	    	checkFlag = false;
	    end if;		
	end if;
	
	-- check for mandatory fields : CONDITIONFROM
	if( :IV_CONDITIONFROM is null ) then
		call message:"get_message"('','','034', '', '', '', '', :sMessage);
		:ET_RETURN.insert((messageType:error, :sMessage));
		checkFlag = false;
	else
		-- CONDITIONFROM to be lesser than CONDITIONTO
	    if( :IV_CONDITIONTO is not null ) then
	    	if ( :IV_CONDITIONFROM > :IV_CONDITIONTO ) then
	    		-- CONDITIONFROM can't be greater than CONDITIONTO message
				call message:"get_message"('','','036', '', '', '', '', :sMessage);
				:ET_RETURN.insert((messageType:error, :sMessage));
				checkFlag = false;
			end if;
		end if;	
	end if;

	-- check for mandatory fields : CONDITIONTO
    if( :IV_CONDITIONTO is null ) then
		call message:"get_message"('','','035', '', '', '', '', :sMessage);
		:ET_RETURN.insert((messageType:error, :sMessage));
		checkFlag = false;	
	end if; 
	
	if ( checkFlag = true ) then
		-- Get all combination of Rule Condition based on input for complete ranges of validity		
		IT_EVENTRULECONDITION = 
			SELECT "EVENTRULECONDITIONUUID", "RULECONDITIONUUID", "CONDITIONFROM", "CONDITIONTO"
			FROM "PR_EVENTRULECONDITION"
			WHERE "RULECONDITIONUUID" = :IV_RULECONDITIONUUID;
		for i in 1..RECORD_COUNT(:IT_EVENTRULECONDITION) do
			if (:checkFlag = true) then
				-- Existing record shall be skipped from checking for update. For create, IV_EVENTRULECONDITIONUUID will be empty
				if ( :IV_EVENTRULECONDITIONUUID != :IT_EVENTRULECONDITION.EVENTRULECONDITIONUUID[i] ) then
					-- Overlapping range with the same RULECONDITIONUUID will invoke error
					if (:IT_EVENTRULECONDITION.CONDITIONFROM[i] <  :IV_CONDITIONFROM AND :IT_EVENTRULECONDITION.CONDITIONTO[i] >  :IV_CONDITIONTO) OR 
					   (:IT_EVENTRULECONDITION.CONDITIONFROM[i] >  :IV_CONDITIONFROM AND :IT_EVENTRULECONDITION.CONDITIONTO[i] <  :IV_CONDITIONTO) OR 
					   (:IT_EVENTRULECONDITION.CONDITIONFROM[i] <= :IV_CONDITIONFROM AND :IT_EVENTRULECONDITION.CONDITIONTO[i] >= :IV_CONDITIONFROM) OR 
					   (:IT_EVENTRULECONDITION.CONDITIONFROM[i] <= :IV_CONDITIONTO   AND :IT_EVENTRULECONDITION.CONDITIONTO[i] >= :IV_CONDITIONTO) then
						-- if overlapping entry exist, raise error
						vEventRuleConditionUuid = :IT_EVENTRULECONDITION.EVENTRULECONDITIONUUID[i];
						vValidFrom = :IT_EVENTRULECONDITION.CONDITIONFROM[i];
						vValidTo = :IT_EVENTRULECONDITION.CONDITIONTO[i];
						call message:"get_message"('','','042',:vEventRuleConditionUuid,:vValidFrom,:vValidTo,'',:sMessage);
						:ET_RETURN.insert((messageType:error, :sMessage));
						checkFlag = false;
					end if;
				end if;
			end if;
		end for;	
	end if;
	
END