PROCEDURE "UPDATE_RULE_CONDITION"(
	IN	IV_RULECONDITIONUUID nvarchar(32),
	IN  IV_RULEID nvarchar(4),
	IN  IV_EVENTTYPEID nvarchar(3),
	IN	IV_SALESORGANIZATIONID nvarchar(4),
	IN	IV_DISTRIBUTIONCHANNELID nvarchar(2),
	IN	IV_VALIDFROM date,
	IN	IV_VALIDTO date,
	IN  IV_PROFILEID nvarchar(1),
	IN	IV_DIMENSIONID nvarchar(3),
	OUT ET_RETURN "TT_RETURN_MESSAGE"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
    
	-- validation for rule condition
	CALL "VALIDATE_RULE_CONDITION"(
		IV_ACTIVITYTYPE => 'UPDATE',
		IV_RULECONDITIONUUID => :IV_RULECONDITIONUUID,
		IV_RULEID => :IV_RULEID,
		IV_EVENTTYPEID => :IV_EVENTTYPEID,
		IV_SALESORGANIZATIONID => :IV_SALESORGANIZATIONID,
		IV_DISTRIBUTIONCHANNELID => :IV_DISTRIBUTIONCHANNELID,
		IV_VALIDFROM => :IV_VALIDFROM,
		IV_VALIDTO => :IV_VALIDTO,
		IV_PROFILEID => :IV_PROFILEID,
		IV_DIMENSIONID => :IV_DIMENSIONID,
		ET_RETURN => ET_RETURN
	);

	if ( RECORD_COUNT(:ET_RETURN) < 1 ) then
    	UPDATE "PR_RULECONDITION"
			SET 
				"RULEID" = :IV_RULEID,
				"EVENTTYPEID" = :IV_EVENTTYPEID,
				"SALESORGANIZATIONID" = :IV_SALESORGANIZATIONID,
			    "DISTRIBUTIONCHANNELID" = :IV_DISTRIBUTIONCHANNELID,
			    "VALIDFROM" = :IV_VALIDFROM,
			    "VALIDTO" = :IV_VALIDTO,
			    "PROFILEID" = :IV_PROFILEID,
			    "DIMENSIONID" = :IV_DIMENSIONID
			WHERE 
				"RULECONDITIONUUID" = :IV_RULECONDITIONUUID;
			COMMIT;
	end if;
END